Commands :

================ when you put repo from online to local machine

$git init
    -- adds a git tracking file to the

$git remote add origin "Github Repo Link.git"
    -- adds the linking of online repo from github to remote machine

$git pull origin main
    -- creates a repo of all files in the local machine

================ when you modify files in local machine and want git to track it

$git add filename.extension
    --adds the new file you wanted to track
OR
$git add -A
    --adds all untracked or modified files to git tracking

$git reset fileName.extension
    --removes the added file from committing and hence, file is not tracked anymore

$git commit -m "title message" -m "complete descriptive message"
    --commits to the git tracking of your new file and adds message to describe changes
OR
$git commit -a -m "title message of commiting all files in folder" -m "descriptive message of the all commit command"
    --commits all files to the git tracking

================= general commands

$git status
    --shows if there are new files not tracked by git or if files already tracked are modified and need to be updated

$git log
    --shows all your commits with messages and date/time and other details

$cat fileName.extension
    --prints out file data

$git config --global core.editor "'Address/of/text/editor.exe' -w"
    --changes text editor of git

$git config --list
    --lists all the details of config settings of the user




================= branching

$git branch branchName
    --makes a branch that inherits tracking of all files of main branch but can have files of its own that dont show up in main branch

$git checkout branchName
    --goes to branch file and tracking system

$git add featureForBranchOnlyFile.extension
    --adds file and tracking and logging to branchName only and not main

$git commit -m "Branch File Changes"
    --commits to branch only and is visible to branch only

++++++ merging branches (execute in master)

$git merge branchName
    --merges your branch to the master branch but branch still remains

**you may require commit to finalize the merging of brnaches but its just regular commit to track new file in master
**if you edit file in branch again then you again need to commit in branch and then merge with master

$git rebase branchName
    --merges everything in the repo and puts all branches timeline into one single line where branches are set before master or after depending on logs

